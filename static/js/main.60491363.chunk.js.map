{"version":3,"sources":["components/titles.jsx","components/form.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","descripiton","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","convertTemp","main","temp","sys","convertConditions","weather","stop","this","kelvin","fahrenheit","Math","round","toUpperCase","titles","components_form","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60491363.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title-container__title\">Weather Finder</h1>\r\n      <p className=\"title-container__subtitle\">\r\n        Find out temperature, conditions and more...\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.getWeather}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n      <button>Get Weather</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"weather__info\">\r\n      {props.city &&\r\n        props.country && (\r\n          <p className=\"weather__key\">\r\n            Location:{\" \"}\r\n            <span className=\"weather__value\">\r\n              {props.city}, {props.country}\r\n            </span>\r\n          </p>\r\n        )}\r\n      {props.temperature && (\r\n        <p className=\"weather__key\">\r\n          Temperature:{\" \"}\r\n          <span className=\"weather__value\">{props.temperature} Fahrenheit</span>\r\n        </p>\r\n      )}\r\n      {props.humidity && (\r\n        <p className=\"weather__key\">\r\n          Humidity: <span className=\"weather__value\">{props.humidity} %</span>\r\n        </p>\r\n      )}\r\n      {props.description && (\r\n        <p className=\"weather__key\">\r\n          Conditions:{\" \"}\r\n          <span className=\"weather__value\">{props.description}</span>\r\n        </p>\r\n      )}\r\n      {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Titles from \"./components/titles\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"bb43cecbd82e53475a3cfc5612b462a0\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    descripiton: undefined,\r\n    error: undefined\r\n  };\r\n\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\r\n    );\r\n    const data = await api_call.json();\r\n    if (city && country) {\r\n      console.log(data);\r\n      this.setState({\r\n        temperature: this.convertTemp(data.main.temp),\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: this.convertConditions(data.weather[0].description),\r\n        error: undefined\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        descripiton: undefined,\r\n        error: \"Please enter the desired location.\"\r\n      });\r\n    }\r\n  };\r\n\r\n  convertTemp = kelvin => {\r\n    const fahrenheit = (kelvin - 273.15) * (9 / 5) + 32;\r\n    return Math.round(fahrenheit);\r\n  };\r\n\r\n  convertConditions = description => {\r\n    return description.toUpperCase();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"col-xs-7 form-container\">\r\n                  <Form getWeather={this.getWeather} />\r\n                  <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}